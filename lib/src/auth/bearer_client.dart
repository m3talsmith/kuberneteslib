import 'dart:io';

import 'package:http/http.dart';
import 'package:http/io_client.dart';
import 'package:json_annotation/json_annotation.dart';

import 'cluster_auth_client.dart';

part 'bearer_client.g.dart';

/// A client that implements bearer token authentication for Kubernetes.
///
/// This client adds the necessary Authorization header with a bearer token
/// to authenticate requests to the Kubernetes API. It extends [BaseClient] to provide
/// HTTP client functionality and implements [ClusterAuthClient] for Kubernetes-specific
/// authentication.
///
/// Example usage:
/// ```dart
/// final client = BearerClient(
///   token: 'your-bearer-token',
///   expirationTimestamp: DateTime.now().add(Duration(hours: 1)),
/// );
/// ```
@JsonSerializable()
class BearerClient extends BaseClient implements ClusterAuthClient {
  /// Creates a new bearer token client.
  /// 
  /// [token] is the bearer token used for authentication.
  /// [expirationTimestamp] optionally specifies when the token expires.
  /// If an expiration timestamp is provided, the client will throw an exception
  /// when attempting to make requests after the token has expired.
  BearerClient({required this.token, this.expirationTimestamp});

  /// The bearer token used for authentication.
  /// 
  /// This token is included in the Authorization header of each request
  /// in the format: `Bearer <token>`.
  final String token;

  /// Optional timestamp indicating when the token expires.
  /// 
  /// If set, the client will check this timestamp before making requests
  /// and throw an exception if the token has expired.
  @JsonKey(includeIfNull: false)
  final DateTime? expirationTimestamp;

  /// Sends an HTTP request with bearer token authentication.
  /// 
  /// This method:
  /// 1. Checks token expiration if [expirationTimestamp] is set
  /// 2. Adds required headers (Authorization and user-agent)
  /// 3. Configures SSL/TLS settings
  /// 4. Sends the request using an [IOClient]
  /// 
  /// Parameters:
  /// - [request]: The HTTP request to send
  /// - [badCertificateCallback]: Optional callback to handle SSL certificate validation
  ///   Defaults to accepting all certificates if not provided
  /// 
  /// Throws:
  /// - [Exception] if the bearer token has expired
  @override
  Future<StreamedResponse> send(
    BaseRequest request, {
    bool Function(X509Certificate, String, int)? badCertificateCallback,
  }) async {
    badCertificateCallback ??= (_, __, ___) => true;

    if (expirationTimestamp != null) {
      final now = DateTime.now();
      if (expirationTimestamp!.isBefore(now)) {
        throw Exception('Bearer token is expired');
      }
    }

    request.headers['user-agent'] = ClusterAuthClient.userAgent;
    request.headers['Authorization'] = 'Bearer $token';
    var context = SecurityContext()..allowLegacyUnsafeRenegotiation = true;
    var client = HttpClient(context: context)
      ..badCertificateCallback = badCertificateCallback;
    return IOClient(client).send(request);
  }

  /// Creates a [BearerClient] instance from a JSON map.
  /// 
  /// This factory constructor is generated by json_serializable.
  factory BearerClient.fromJson(Map<String, dynamic> json) =>
      _$BearerClientFromJson(json);

  /// Converts this [BearerClient] instance to a JSON map.
  /// 
  /// This method is generated by json_serializable.
  @override
  Map<String, dynamic> toJson() => _$BearerClientToJson(this);
}
