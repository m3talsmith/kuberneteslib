import 'dart:typed_data';

import 'package:http/http.dart';
import 'package:kuberneteslib/src/helpers/uint8list_converter.dart';

import 'cluster_auth_client.dart';

/// A client that implements certificate-based authentication for Kubernetes.
///
/// This client uses X.509 client certificates to authenticate requests to
/// the Kubernetes API. It extends [BaseClient] to provide HTTP client functionality
/// and implements [ClusterAuthClient] for Kubernetes-specific authentication.
///
/// Example usage:
/// ```dart
/// final client = CertClient(
///   clientCertificateAuthority: certificateAuthorityData,
///   clientCertificateData: clientCertData,
///   clientKeyData: privateKeyData,
/// );
/// ```
class CertClient extends BaseClient implements ClusterAuthClient {
  /// Creates a new certificate client.
  ///
  /// Parameters:
  /// - [clientCertificateAuthority]: The Certificate Authority (CA) certificate data
  ///   used to validate the server's certificate
  /// - [clientCertificateData]: The client's certificate data used for mutual TLS
  ///   authentication
  /// - [clientKeyData]: The client's private key data corresponding to the certificate
  CertClient({
    required this.clientCertificateAuthority,
    required this.clientCertificateData,
    required this.clientKeyData,
  });

  /// The certificate authority data used to validate the server's certificate.
  ///
  /// This CA certificate is used to establish trust with the Kubernetes API server.
  @Uint8ListConverter()
  final Uint8List clientCertificateAuthority;

  /// The client certificate data used for mutual TLS authentication.
  ///
  /// This certificate proves the client's identity to the Kubernetes API server.
  @Uint8ListConverter()
  final Uint8List clientCertificateData;

  /// The client private key data used to sign requests.
  ///
  /// This private key corresponds to the client certificate and is used
  /// to establish the SSL/TLS connection.
  @Uint8ListConverter()
  final Uint8List clientKeyData;

  /// Sends an HTTP request with certificate authentication.
  ///
  /// This method:
  /// 1. Configures the SSL/TLS context with the certificate data
  /// 2. Sets up client certificate authentication
  /// 3. Adds required headers (user-agent)
  /// 4. Sends the request using an [IOClient]
  ///
  /// Parameters:
  /// - [request]: The HTTP request to send
  /// - [badCertificateCallback]: Optional callback to handle SSL certificate validation
  ///   Defaults to accepting all certificates if not provided
  ///
  /// The method configures a [SecurityContext] with:
  /// - Certificate authority for server validation
  /// - Client certificate for mutual TLS (if provided)
  /// - Client private key for authentication (if provided)
  @override
  Future<StreamedResponse> send(BaseRequest request) async {
    throw UnimplementedError('CertClient is not implemented');
  }

  /// Creates a [CertClient] instance from a JSON map.
  ///
  /// This factory constructor is generated by json_serializable.
  factory CertClient.fromJson(Map<String, dynamic> json) =>
      throw UnimplementedError('CertClient is not implemented');

  /// Converts this [CertClient] instance to a JSON map.
  ///
  /// This method is generated by json_serializable.
  @override
  Map<String, dynamic> toJson() =>
      throw UnimplementedError('CertClient is not implemented');
}
