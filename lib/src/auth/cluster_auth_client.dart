import 'package:http/http.dart';
import 'package:json_annotation/json_annotation.dart';

part 'cluster_auth_client.g.dart';

/// A base client interface for Kubernetes cluster authentication.
///
/// This abstract class extends the http [BaseClient] and defines common
/// functionality for different authentication methods when communicating with
/// a Kubernetes cluster.
///
/// The [ClusterAuthClient] works in conjunction with [ClusterAuth] to provide
/// authenticated HTTP requests to the Kubernetes API. It supports multiple
/// authentication methods including:
/// * Bearer token authentication (via [BearerClient])
/// * Client certificate authentication (via [CertClient])
/// * Basic authentication
///
/// The authentication flow typically works as follows:
/// 1. [ClusterAuth] determines the appropriate authentication method from config
/// 2. [ClusterAuth] creates the appropriate [ClusterAuthClient] implementation
/// 3. All HTTP requests are then made through this authenticated client
///
/// Example usage:
/// ```dart
/// final auth = ClusterAuth.fromConfig(config);
/// await auth.ensureInitialization(); // Creates appropriate ClusterAuthClient
/// final response = await auth.get(Uri.parse('https://api.example.com'));
/// ```
@JsonSerializable()
class ClusterAuthClient extends BaseClient {
  /// Creates a new base cluster authentication client.
  ///
  /// This constructor is typically not called directly. Instead, use specific
  /// implementations like [BearerClient] or [CertClient].
  ClusterAuthClient();

  /// The user agent string that will be sent with all API requests.
  ///
  /// This helps identify requests coming from this library when examining
  /// server logs or debugging API interactions. The value is fixed as
  /// 'kuberneteslib' for all requests made through this client.
  ///
  /// This user agent is automatically added to all requests made through
  /// implementations of this class.
  static const String userAgent = 'kuberneteslib';

  /// Sends an HTTP request with the kuberneteslib user agent.
  ///
  /// This base implementation only adds the user agent header. Subclasses
  /// should override this method to add their specific authentication
  /// mechanisms.
  ///
  /// Parameters:
  /// - [request]: The HTTP request to send
  @override
  Future<StreamedResponse> send(BaseRequest request) {
    request.headers['User-Agent'] = userAgent;
    return request.send();
  }

  /// Creates a [ClusterAuthClient] instance from a JSON map.
  ///
  /// This factory constructor is generated by json_serializable.
  factory ClusterAuthClient.fromJson(Map<String, dynamic> json) =>
      _$ClusterAuthClientFromJson(json);

  /// Converts this [ClusterAuthClient] instance to a JSON map.
  ///
  /// This method is generated by json_serializable.
  Map<String, dynamic> toJson() => _$ClusterAuthClientToJson(this);
}
